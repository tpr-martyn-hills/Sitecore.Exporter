@page "/simple-redirect"

@using System.Text.Json
@using Azure.Data.Tables
@using FieldExporter.UI.Models
@using FieldExporter.UI.Models.Exporter
@using FieldExporter.UI.Services

@inject AzureTableStorageService AzureTableStorageService
@inject IJSRuntime JS

<div class="space-y-3">
    <h2 class="text-3xl font-extrabold">Simple Redirect Generator</h2>

    <div class="flex justify-between space-x-3">

        <div class="w-1/3">
            <ol class="list-decimal list-inside">
                <li>Load fields from json and store data</li>
                <li>Generate basic redirects and store data </li>
                <li>Add item ids to SitecorePathItemID list</li>
                <li>Sanitize destination urls to abstract urls and Sitecore Item Ids</li>
                <li>Add Sitecore Item Ids to SitecorePathItemID list</li>
                <li>Add SitecorePathItemID copy to clipboard for Sitecore Item Path SQL query</li>
                <li>Load Sitecore Item Path file data from json and store</li>
                <li>Update Redirect Items with Item Paths</li>
                <li>Update Redirect Items replacing destination Sitecore Ids with Item Paths</li>
                <li>Sanitize Destination urls removing Sitecore Tree Path</li>
                <li>Export Valid and Invalid Redirect Urls to Json</li>
            </ol>
        </div>

        <div class="w-1/3 space-y-3">
            @if (!RedirectItems.Any())
            {
                <div class="border border-gray-800 p-3 rounded space-y-3">
                    <div class="flex justify-between">
                        <h3 class="font-semibold">Upload Fields file</h3>
                    </div>

                    <InputFile OnChange="@(e => HandleFieldsFileUpload(e))" accept=".json" />
                </div>
            }

            @if (RedirectItems.Any() && !PathItems.Any())
            {
                <div class="border border-gray-800 p-3 rounded space-y-3">
                    <div class="flex justify-between">
                        <h3 class="font-semibold">Upload Paths file</h3>

                    </div>

                    <InputFile OnChange="@(e => HandlePathsUpload(e))" accept=".json" />
                </div>
            }
        </div>

        <div class="w-1/3">
            <table class="border-collapse border border-gray-400 table-fixed text-sm w-full">
                <tbody>
                    <tr>
                        <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Fields</td>
                        <td class="border border-gray-300 p-2">@FieldItems.Count</td>
                        <td class="border border-gray-300 p-2 w-1/4">
                            @if (FieldItems.Any())
                            {
                                <button class="px-2 py-1 bg-blue-500 text-white rounded w-full hover:bg-blue-600" @onclick="() => ResetAllAsync()">Reset</button>
                            }
                        </td>
                    </tr>

                    <tr>
                        <td class="border border-gray-300 w-1/4 p-2 bg-gray-100">Sitecore Ids</td>
                        <td class="border border-gray-300 p-2">@PathSitecoreIds.Count()</td>
                        <td class="border border-gray-300 p-2 w-1/4">
                            @if (PathSitecoreIds.Any())
                            {
                                <button class="px-2 py-1 bg-blue-500 text-white rounded w-full hover:bg-blue-600"
                                        @onclick="() => CopyToClipboard()">
                                    <span>Copy Ids</span>
                                </button>
                            }
                        </td>
                    </tr>

                    @if (PathItems.Any())
                    {
                    <tr>
                        <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Paths</td>
                        <td class="border border-gray-300 p-2">@PathItems.Count()</td>
                        <td class="border border-gray-300 p-2 w-1/4"></td>
                    </tr>                        
                    }

                    @if (RedirectItems.Where(x => x.RedirectGenerated).Any())
                    { 
                        <tr>
                            <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Valid Redirects</td>
                            <td class="border border-gray-300 p-2"><span class="hover:cursor-pointer hover:font-semibold" @onclick='(() => FilteredRedirectResults("Valid Redirects"))'>@RedirectItems.Where(x => x.IsValidRedirect).Count()</span></td>
                            <td class="border border-gray-300 p-2 w-1/4">
                                @if (RedirectItems.Where(x => x.RedirectGenerated).Count() > 0)
                                {
                                    <button class="px-2 py-1 bg-blue-500 text-white rounded w-full hover:bg-blue-600" 
                                            @onclick="() => ExportRedirectToJSONAsync(true)">
                                            <span>Export</span>
                                    </button>
                                }
                            </td>
                        </tr>

                        <tr>
                            <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Invalid Redirects</td>
                            <td class="border border-gray-300 p-2"><span class="hover:cursor-pointer hover:font-semibold" @onclick='(() => FilteredRedirectResults("Invalid Redirects"))'>@RedirectItems.Where(x => !x.IsValidRedirect).Count()</span></td>
                            <td class="border border-gray-300 p-2 w-1/4">
                                @if (RedirectItems.Where(x => x.RedirectGenerated).Count() > 0)
                                {
                                    <button class="px-2 py-1 bg-blue-500 text-white rounded w-full hover:bg-blue-600" 
                                            @onclick="() => ExportRedirectToJSONAsync(false)">
                                            <span>Export</span>
                                    </button>
                                }
                            </td>
                        </tr>

                        <tr>
                            <td class="border border-gray-300 p-2 w-1/4 bg-gray-100 font-bold">Total Redirects</td>
                            <td class="border border-gray-300 p-2"><span class="hover:cursor-pointer hover:font-semibold" @onclick='(() => FilteredRedirectResults("Redirects"))'>@RedirectItems.Count()</span></td>
                            <td class="border border-gray-300 p-2 w-1/4"></td>
                        </tr>

                        <tr>
                            <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Sitecore Redirects</td>
                            <td class="border border-gray-300 p-2"><span class="hover:cursor-pointer hover:font-semibold" @onclick='(() => FilteredRedirectResults("Sitecore Redirects"))'>@RedirectItems.Where(x => x.IsSitecoreItemIdDestination).Count()</span></td>
                            <td class="border border-gray-300 p-2 w-1/4"></td>
                        </tr>

                        <tr>
                            <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Other Redirects</td>
                            <td class="border border-gray-300 p-2"><span class="hover:cursor-pointer hover:font-semibold" @onclick='(() => FilteredRedirectResults("Other Redirects"))'>@RedirectItems.Where(x => !x.IsSitecoreItemIdDestination).Count()</span></td>
                            <td class="border border-gray-300 p-2 w-1/4"></td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td class="border border-gray-300 p-2 w-1/4 bg-gray-100">Awaiting Redirects</td>
                            <td class="border border-gray-300 p-2">@RedirectItems.Where(x => !x.RedirectGenerated).Count()</td>
                            <td class="border border-gray-300 p-2 w-1/4"></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if(FilteredRedirectItems.Any())
    {
        <div class=" space-y-2">
        <h2 class="text-3xl font-extrabold">@RedirectHeaderText</h2>

        @foreach (var item in FilteredRedirectItems.OrderBy(x => x.RowKey))
        {
            <table class="border-collapse border border-gray-400 table-fixed text-sm w-full">
                <tbody>
                    <tr>
                        <td class="border border-gray-300 w-1/4 p-2 bg-gray-100">Item ID</td>
                        <td class="border border-gray-300 p-2">@item.RowKey</td>
                    </tr>

                    <tr>
                        <td class="border border-gray-300 p-2 bg-gray-100">Item Path</td>
                        <td class="border border-gray-300 p-2">@item.ItemPath</td>
                    </tr>

                    <tr>
                        <td class="border border-gray-300 p-2 bg-gray-100">Status</td>
                            @if (item.RedirectGenerated)
                            {
                                if (item.IsValidRedirect)
                                {
                                    <td class="border border-gray-300 p-2">Valid</td>    
                                }
                                else
                                {
                            <td class="border border-gray-300 p-2 bg-red-300">Invalid</td>            
                                }
                            }
                            else
                            {
                            <td class="border border-gray-300 p-2 by-orange-300">Awaiting</td>    
                            }
                    </tr>

                    <tr>
                        <td class="border border-gray-300 p-2 bg-gray-100">Sitecore redirect</td>
                        <td class="border border-gray-300 p-2">@(item.SitecoreDestinationId != null)</td>
                    </tr>

                    <tr>
                        <td class="border border-gray-300 p-2 bg-gray-100">Url</td>
                        <td class="border border-gray-300 p-2">@item.Url</td>
                    </tr>



                    @if (item.SitecoreDestinationId != null)
                    {
                        <tr>
                            <td class="border border-gray-300 p-2 bg-gray-100">Destination Url</td>
                            <td class="border border-gray-300 p-2"><a class="hover:font-semibold" target="_blank" href="@ReturnSitecoreUrl(item.DestinationUrl)">@item.DestinationUrl</a></td>
                        </tr>

                        <tr>
                            <td class="border border-gray-300 p-2 bg-gray-100">Destination Sitecore Id</td>
                            <td class="border border-gray-300 p-2">@item.SitecoreDestinationId</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td class="border border-gray-300 p-2 bg-gray-100">Destination Url</td>
                            <td class="border border-gray-300 p-2"><a class="hover:font-semibold" target="_blank" href="@ReturnSitecoreUrl(item.DestinationUrl)">@item.DestinationUrl</a></td>
                        </tr>   
                    }
                </tbody>
            </table>
        }
    </div>
    }
</div>

@code {
    private const string RedirectTableName = "RedirectItemsTable";
    private const string FieldsTableName = "FieldItemsTable";
    private const string PathsTableName = "PathItemsTable";

    private string StatusMessage = string.Empty;
    private string RedirectHeaderText = "Redirects";

    private List<RedirectUrlItemTableEntity> RedirectItems { get; set; } = [];
    private List<FieldItemTableEntity> FieldItems { get; set; } = [];
    private List<PathItemTableEntity> PathItems { get; set; } = [];

    private List<RedirectUrlItemTableEntity> FilteredRedirectItems { get; set; } = [];

    private List<string> PathSitecoreIds { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var redirectUrlItems = await GetTableItems<RedirectUrlItemTableEntity>(RedirectTableName);
        RedirectItems = redirectUrlItems.ToList();
        FilteredRedirectItems = RedirectItems;

        var fieldItems = await GetTableItems<FieldItemTableEntity>(FieldsTableName);
        FieldItems = fieldItems.ToList();

        var pathItems = await GetTableItems<PathItemTableEntity>(PathsTableName);
        PathItems = pathItems.ToList();

        StateHasChanged();
    }

    private async Task HandleFieldsFileUpload(InputFileChangeEventArgs e)
    {
        await ResetAllAsync();

        var content = await LoadFileDetailsAsync(e.File);
        if (string.IsNullOrEmpty(content))
        {
            StatusMessage = "The uploaded file is empty.";
            StateHasChanged();
            return;
        }

        StatusMessage = "Parsing Field Items...";
        PathSitecoreIds = [];

        var records = JsonSerializer.Deserialize<List<FieldItemTableEntity>>(content);
        StatusMessage = $"Successfully parsed {records?.Count ?? 0} records from '{e.File.Name}'.";

        if (!records.Any())
        {
            StatusMessage = "No field items found";
            StateHasChanged();
            return;
        }

        foreach (var item in records)
        {
            item.FieldValue = ValidateAndFormatGuid(ExtractElementFromText(item.FieldValue));
        }

        await AzureTableStorageService.AddUpdateBulkEntitiesAsync(FieldsTableName, records);

        FieldItems = records;

        await GenerateRedirects();

        foreach (var redirect in RedirectItems.Where(x => x.IsSitecoreItemDestination)
                                                           .Select(x => x.DestinationUrl)
                                                           .Distinct())
        {

            PathSitecoreIds.Add(redirect);
        }

        foreach (var item in RedirectItems)
        {
            PathSitecoreIds.Add(item.RowKey);
        }

        PathSitecoreIds = PathSitecoreIds.Distinct().ToList();

        StateHasChanged();
    }

    private async Task GenerateRedirects()
    {
        RedirectItems = [];

        foreach (var field in FieldItems)
        {
            var redirectItem = RedirectItems.FirstOrDefault(x => string.Equals(x.RowKey, field.PartitionKey, StringComparison.InvariantCultureIgnoreCase));
            if (redirectItem is null)
            {
                redirectItem = new RedirectUrlItemTableEntity
                {
                    RowKey = field.PartitionKey,
                    PartitionKey = "RedirectUrl",
                    Url = field.FieldType == "Url" ? field.FieldValue : "",
                    DestinationUrl = field.FieldType == "DestinationUrl" ? field.FieldValue : "",
                };

                RedirectItems.Add(redirectItem);
            }

            redirectItem.Url = field.FieldType == "Url" ? field.FieldValue : redirectItem.Url;
            redirectItem.DestinationUrl = field.FieldType == "DestinationUrl" ? field.FieldValue : redirectItem.DestinationUrl;
        }

        foreach (var item in RedirectItems)
        {
            if (item.IsSitecoreItemDestination)
            {
                item.SitecoreDestinationId = item.DestinationUrl;
            }
        }

        await AzureTableStorageService.AddUpdateBulkEntitiesAsync(RedirectTableName, RedirectItems);

        StateHasChanged();
    }

    private async Task HandlePathsUpload(InputFileChangeEventArgs e)
    {
        var content = await LoadFileDetailsAsync(e.File);
        if (string.IsNullOrEmpty(content))
        {
            StatusMessage = "The uploaded file is empty.";
            StateHasChanged();
            return;
        }

        StatusMessage = "Parsing Path Items...";

        var records = JsonSerializer.Deserialize<List<PathItemTableEntity>>(content);
        StatusMessage = $"Successfully parsed {records?.Count ?? 0} records from '{e.File.Name}'.";

        if (records.Any())
        {
            await AzureTableStorageService.AddUpdateBulkEntitiesAsync(PathsTableName, records);

            var items = await GetTableItems<PathItemTableEntity>(PathsTableName);
            PathItems = items.ToList();
            await SyncPathsWithRedirects();
        }

        StateHasChanged();
    }

    private async Task SyncPathsWithRedirects()
    {
        foreach (var redirect in RedirectItems.Where(x => x.IsSitecoreItemDestination))
        {
            var pathItem = PathItems.FirstOrDefault(x => string.Equals(x.RowKey, redirect.SitecoreDestinationId, StringComparison.InvariantCultureIgnoreCase));
            if (pathItem != null)
            {
                redirect.DestinationUrl = ConvertPathToUrl(pathItem.ItemPath);
            }
        }

        foreach (var redirect in RedirectItems)
        {
            var pathItem = PathItems.FirstOrDefault(x => string.Equals(x.RowKey, redirect.RowKey, StringComparison.InvariantCultureIgnoreCase));
            if (pathItem != null)
            {
                redirect.ItemPath = pathItem.ItemPath;
            }
        }

        RedirectItems.ForEach(item =>
        {
            item.RedirectGenerated = true;

            item.DestinationUrl = ConvertPathToUrl(item.DestinationUrl, "/ThePensionsRegulator/Home/");
        });

        await AzureTableStorageService.AddUpdateBulkEntitiesAsync(RedirectTableName, RedirectItems);

        FilteredRedirectItems = RedirectItems;

        StateHasChanged();
    }

    private async Task CopyToClipboard()
    {
        // var destinationUrls = RedirectItems
        //     .Where(x => x.IsSitecoreItemDestination)
        //     .Select(x => $"'{x.DestinationUrl}'")
        //     .Distinct()
        //     .Where(x => !string.IsNullOrWhiteSpace(x))
        //     .Take(10000);

        var destinationUrls = PathSitecoreIds.Select(x => $"'{x}'")
                                .Where(x => !string.IsNullOrWhiteSpace(x))
                                .Distinct()
                                .Take(10000);

        var clipboardText = string.Join("," + Environment.NewLine, destinationUrls);

        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", clipboardText);
            StatusMessage = $"Copied {destinationUrls.Count()} IDs to clipboard!";
        }
        catch (Exception)
        {
            StatusMessage = "Failed to copy to clipboard. Please check browser permissions.";
        }
        StateHasChanged();
    }

private async Task ExportRedirectToJSONAsync(bool isValidRedirect)
{
    try
    {
        var redirectExport = new RedirectExportModel
        {
            Versions = new VersionInfo(),
            Redirects = RedirectItems
                .Where(x => x.IsValidRedirect == isValidRedirect)
                .Select(item => new RedirectInfo
                {
                    Key = item.RowKey,
                    Url = $"/{item.Url}".Trim(),
                    Destination = new DestinationInfo
                    {
                        Url =  item.DestinationUrl.StartsWith("http") ? item.DestinationUrl.Trim() 
                            : $"https://www.thepensionsregulator.gov.uk/{item.DestinationUrl}".Trim(),
                    }
                })
                .Take(10)
                .ToList()
        };

        // Serialize with indentation for readability
        var options = new JsonSerializerOptions 
        { 
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
        
        string jsonString = JsonSerializer.Serialize(redirectExport, options);

        // Convert to bytes
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(jsonString);

        // Create file name with timestamp
        string fileName = $"{(isValidRedirect ? "valid" : "invalid")}_redirects_{DateTime.Now:yyyyMMdd_HHmmss}.json";

        // Use JS interop to download the file
        await JS.InvokeVoidAsync(
            "downloadFileFromStream",
            Convert.ToBase64String(bytes),
            fileName
        );

        StatusMessage = $"Successfully exported {RedirectItems.Count} redirects to {fileName}";
    }
    catch (Exception ex)
    {
        StatusMessage = $"Error exporting redirects: {ex.Message}";
    }

    StateHasChanged();
}


    private async Task ExportRedirectToJSONAsync2(bool isValidRedirect)
    {
        try
        {
            // Create a simplified version of the data with only the required fields
            var simplifiedRedirects = RedirectItems.Where(x => x.IsValidRedirect == isValidRedirect).Select(item => new
            {
                RedirectItemId = item.RowKey,
                RedirectItemPath = item.ItemPath,
                item.Url,
                item.DestinationUrl,
                item.SitecoreDestinationId
            }).ToList();

            // Serialize with indentation for readability
            var options = new JsonSerializerOptions { WriteIndented = true };
            string jsonString = JsonSerializer.Serialize(simplifiedRedirects.OrderBy(x => x.RedirectItemPath), options);

            // Convert to bytes
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(jsonString);

            // Create file name with timestamp
            string fileName = $"{(isValidRedirect ? "valid" : "invalid")}_redirects_{DateTime.Now:yyyyMMdd_HHmmss}.json";

            // Use JS interop to download the file
            await JS.InvokeVoidAsync(
                "downloadFileFromStream",
                Convert.ToBase64String(bytes),
                fileName
            );

            StatusMessage = $"Successfully exported {RedirectItems.Count} redirects to {fileName}";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error exporting redirects: {ex.Message}";
        }

        StateHasChanged();
    }

    private void FilteredRedirectResults(string filterText)
    {
        if (filterText == "Valid Redirects")
        {
            FilteredRedirectItems = RedirectItems.Where(x => x.IsValidRedirect).ToList();
        }
        else if (filterText == "Invalid Redirects")
        {
            FilteredRedirectItems = RedirectItems.Where(x => !x.IsValidRedirect).ToList();
        }
        else if (filterText == "Sitecore Redirects")
        {
            FilteredRedirectItems = RedirectItems.Where(x => x.IsSitecoreItemIdDestination).ToList();
        }
        else if (filterText == "Other Redirects")
        {
            FilteredRedirectItems = RedirectItems.Where(x => !x.IsSitecoreItemIdDestination).ToList();
        }
        else
        {
            FilteredRedirectItems = RedirectItems;    
        }

        RedirectHeaderText = $"{filterText} :: {FilteredRedirectItems.Count()}";
    }

    private async Task<string> LoadFileDetailsAsync(IBrowserFile file)
    {
        if (file == null || !file.Name.EndsWith(".json"))
        {
            StatusMessage = "Please upload a valid JSON file.";
            return string.Empty;
        }

        StatusMessage = $"File '{file.Name}' uploaded successfully with size {file.Size} bytes.";

        using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10); // 10 MB limit
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();

        if (string.IsNullOrWhiteSpace(content))
        {
            StatusMessage = "The uploaded file is empty.";
            return string.Empty;
        }

        return content;
    }

    private async Task<IEnumerable<T>> GetTableItems<T>(string tableName) where T : class, ITableEntity, new()
    {
        var entities = await AzureTableStorageService.GetEntitiesAsync<T>(tableName);
        return entities.Cast<T>();
    }

    private async Task ResetAllAsync()
    {
        try
        {
            PathSitecoreIds = [];
            FieldItems = [];
            RedirectItems = [];
            FilteredRedirectItems = [];
            PathItems = [];

            await AzureTableStorageService.ClearTableAsync(FieldsTableName);
            await AzureTableStorageService.ClearTableAsync(RedirectTableName);
            await AzureTableStorageService.ClearTableAsync(PathsTableName);
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error clearing table: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task ClearTableClickAsync(string tableName)
    {
        try
        {

            StatusMessage = $"{tableName} Table cleared successfully.";

            if (tableName == RedirectTableName)
            {
                await AzureTableStorageService.ClearTableAsync(RedirectTableName);
                RedirectItems = [];
            }
            else if (tableName == FieldsTableName)
            {
                await AzureTableStorageService.ClearTableAsync(FieldsTableName);
                FieldItems = [];

                await AzureTableStorageService.ClearTableAsync(RedirectTableName);
                RedirectItems = [];

                await AzureTableStorageService.ClearTableAsync(PathsTableName);
                PathItems = [];
            }
            else if (tableName == PathsTableName)
            {
                await AzureTableStorageService.ClearTableAsync(PathsTableName);
                PathItems = [];
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error clearing table: {ex.Message}";
        }

        StateHasChanged();
    }

    private string ExtractElementFromText(string linkElement)
    {
        linkElement = linkElement?.Trim();

        if (!linkElement.StartsWith("<link"))
            return linkElement.Trim();

        var elementToExtract = linkElement.StartsWith("<link text") ? "id" : "url";

        try
        {
            var xElement = System.Xml.Linq.XElement.Parse(linkElement);
            return xElement.Attribute(elementToExtract)?.Value ?? string.Empty;
        }
        catch (System.Xml.XmlException)
        {
            return string.Empty;
        }
    }

    private string ValidateAndFormatGuid(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return string.Empty;

        if (Guid.TryParse(input, out Guid result))
        {
            return result.ToString("D");
        }

        return input.Trim();
    }

    private bool IsValidGuid(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return false;

        return Guid.TryParse(input, out _);
    }

    private string ConvertPathToUrl(string path, string startsWith = "/sitecore/content/ThePensionsRegulator/Home/")
    {
        if (string.IsNullOrEmpty(path))
            return string.Empty;

        if (!path.StartsWith(startsWith))
            return path.Trim();

        var url = path.Trim().Replace(startsWith, "");
        return url.Replace(" ", "-").Trim().ToLower();
    }

    private string ReturnSitecoreUrl(string path)
    {
        if (path.StartsWith("http"))
            return path;

        return $"https://www.thepensionsregulator.gov.uk/{path}".Trim();
    }
}
